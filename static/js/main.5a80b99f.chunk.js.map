{"version":3,"sources":["api/constants.ts","api/utils.ts","components/Coment/Comment.tsx","components/Coment/CommentList.tsx","components/User/User.tsx","components/Post/Post.tsx","components/PostList/PostList.tsx","index.tsx","App.tsx"],"names":["API_URL","getData","url","fetch","then","response","json","getPreparedPosts","a","posts","users","comments","map","post","user","find","id","userId","filter","comment","postId","Comment","name","body","email","className","href","CommentList","key","User","address","city","street","PostComponent","title","PostsList","ReactDOM","render","useState","isLoading","setIsLoadind","setPosts","query","setQuery","handleLoadButton","postsFromServer","filterPostsByQuery","useMemo","toLowerCase","includes","length","type","disabled","onClick","placeholder","onChange","event","target","value","document","getElementById"],"mappings":"mRAAaA,EAAU,wCCEVC,EAAU,SAAIC,GAAJ,OAAgCC,MAAMD,GAAKE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WAI/EC,EAAgB,uCAAG,gCAAAC,EAAA,sEAHwBP,EAAO,UAAqBD,EAArB,UAG/B,cACxBS,EADwB,gBAFwBR,EAAO,UAAqBD,EAArB,UAE/B,cAExBU,EAFwB,gBAD8BT,EAAO,UAAwBD,EAAxB,aACrC,cAGxBW,EAHwB,yBAKtBF,EAAMG,KAAI,SAAAC,GAAI,sBACjBA,EADiB,CAEpBC,KAAMJ,EAAMK,MAAK,SAAAD,GAAI,OAAIA,EAAKE,KAAOH,EAAKI,UAC1CN,SAAUA,EAASO,QAAO,SAAAC,GAAO,OAAIA,EAAQC,SAAWP,EAAKG,YARjC,4CAAH,qDCAhBK,EAAqB,SAAC,GAAiB,IAAfF,EAAc,EAAdA,QAC3BG,EAAsBH,EAAtBG,KAAMC,EAAgBJ,EAAhBI,KAAMC,EAAUL,EAAVK,MAEpB,OACE,yBAAKC,UAAU,WACb,4BAAKH,GACL,2BAAIC,GACJ,uBAAGG,KAAMF,GACNA,KCPIG,EAAyB,SAAC,GAAkB,IAAhBhB,EAAe,EAAfA,SACvC,OACE,oCACGA,EAASC,KAAI,SAAAO,GAAO,OACnB,kBAAC,EAAD,CAASS,IAAKT,EAAQH,GAAIG,QAASA,SCL9BU,EAAkB,SAAC,GAAD,IAAGf,EAAH,EAAGA,KAAH,OAC7B,oCACE,2BACGA,EAAKQ,MAER,2BACGR,EAAKgB,QAAQC,KACd,6BACCjB,EAAKgB,QAAQE,QAEhB,uBAAGN,KAAMZ,EAAKU,OACXV,EAAKU,SCRCS,G,MAA2B,SAAC,GAAc,IAAZpB,EAAW,EAAXA,KAEvCqB,EAIErB,EAJFqB,MACAX,EAGEV,EAHFU,KACAT,EAEED,EAFFC,KACAH,EACEE,EADFF,SAGF,OACE,yBAAKc,UAAU,QACb,yBAAKA,UAAU,eACb,kBAAC,EAAD,CAAMX,KAAMA,KAEd,yBAAKW,UAAU,cACb,wBAAIA,UAAU,eACXS,GAEH,uBAAGT,UAAU,cACVF,IAGL,yBAAKE,UAAU,sBACb,kBAAC,EAAD,CAAad,SAAUA,QCxBlBwB,EAAuB,SAAC,GAAD,IAAG1B,EAAH,EAAGA,MAAH,OAClC,yBAAKgB,UAAU,aACZhB,EAAMG,KAAI,SAAAC,GAAI,OACb,kBAAC,EAAD,CAAee,IAAKf,EAAKG,GAAIH,KAAMA,SCLzCuB,IAASC,OACP,mBCEqB,WAAO,IAAD,EACOC,oBAAS,GADhB,mBACpBC,EADoB,KACTC,EADS,OAEDF,mBAA2B,IAF1B,mBAEpB7B,EAFoB,KAEbgC,EAFa,OAGDH,mBAAS,IAHR,mBAGpBI,EAHoB,KAGbC,EAHa,KAKrBC,EAAgB,uCAAG,4BAAApC,EAAA,6DACvBgC,GAAa,GADU,SAEOjC,IAFP,OAEjBsC,EAFiB,OAIvBJ,EAASI,GAJc,2CAAH,qDAahBC,EAAqBC,mBAAQ,kBAAMtC,EAAMS,QAC7C,SAAAL,GAAI,OAAIA,EAAKqB,MAAMc,cAAcC,SAASP,IACvC7B,EAAKU,KAAKyB,cAAcC,SAASP,QACnC,CAACjC,EAAOiC,IAEX,OACE,oCACE,qDACkB,IAAjBjC,EAAMyC,OAEH,4BACEC,KAAK,SACLC,SAAUb,EACVd,UAAU,SACV4B,QAAST,GAERL,EAAa,kDAAmB,mDAInC,oCACE,2BACEY,KAAK,OACLnC,GAAG,eACHS,UAAU,eACV6B,YAAY,mBACZC,SAhCQ,SAACC,GACnBb,EAASa,EAAMC,OAAOC,UAiCd,kBAAC,EAAD,CAAWjD,MAAOqC,QDhD5B,MACAa,SAASC,eAAe,U","file":"static/js/main.5a80b99f.chunk.js","sourcesContent":["export const API_URL = 'https://jsonplaceholder.typicode.com/';\n","import { API_URL } from './constants';\n\nexport const getData = <T>(url: string): Promise<T> => fetch(url).then(response => response.json());\nexport const getPosts = (): Promise<PostInterface[]> => getData<PostInterface[]>(`${API_URL}posts`);\nexport const getUsers = (): Promise<UserInterface[]> => getData<UserInterface[]>(`${API_URL}users`);\nexport const getComments = (): Promise<CommentInterface[]> => getData<CommentInterface[]>(`${API_URL}comments`);\nexport const getPreparedPosts = async () => {\n  const posts: PostInterface[] = await getPosts();\n  const users: UserInterface[] = await getUsers();\n  const comments: CommentInterface[] = await getComments();\n\n  return (posts.map(post => ({\n    ...post,\n    user: users.find(user => user.id === post.userId) as UserInterface,\n    comments: comments.filter(comment => comment.postId === post.id) as CommentInterface[],\n  })));\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  comment: CommentInterface;\n}\n\nexport const Comment: FC<Props> = ({ comment }) => {\n  const { name, body, email } = comment;\n\n  return (\n    <div className=\"comment\">\n      <h4>{name}</h4>\n      <p>{body}</p>\n      <a href={email}>\n        {email}\n      </a>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { Comment } from './Comment';\n\ninterface Props {\n  comments: CommentInterface[];\n}\n\nexport const CommentList: FC<Props> = ({ comments }) => {\n  return (\n    <>\n      {comments.map(comment => (\n        <Comment key={comment.id} comment={comment} />\n      ))}\n    </>\n  );\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  user: UserInterface;\n}\n\nexport const User: FC<Props> = ({ user }) => (\n  <>\n    <p>\n      {user.name}\n    </p>\n    <p>\n      {user.address.city}\n      <br />\n      {user.address.street}\n    </p>\n    <a href={user.email}>\n      {user.email}\n    </a>\n  </>\n);\n","import React, { FC } from 'react';\nimport { CommentList } from '../Coment/CommentList';\nimport { User } from '../User/User';\nimport './Post.css';\n\ninterface Props {\n  post: PostsInterface;\n}\n\nexport const PostComponent: FC<Props> = ({ post }) => {\n  const {\n    title,\n    body,\n    user,\n    comments,\n  } = post;\n\n  return (\n    <div className=\"post\">\n      <div className=\"post__autor\">\n        <User user={user} />\n      </div>\n      <div className=\"post__body\">\n        <h2 className=\"post__title\">\n          {title}\n        </h2>\n        <p className=\"post__text\">\n          {body}\n        </p>\n      </div>\n      <div className=\"post__comment-list\">\n        <CommentList comments={comments} />\n      </div>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { PostComponent } from '../Post/Post';\n\ninterface Props {\n  posts: PostsInterface[];\n}\n\nexport const PostsList: FC<Props> = ({ posts }) => (\n  <div className=\"post-list\">\n    {posts.map(post => (\n      <PostComponent key={post.id} post={post} />\n    ))}\n  </div>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n","import React, {\n  FC, useState, useMemo, /* useCallback, */\n} from 'react';\n/* import { debounce } from 'lodash'; */\nimport './App.css';\nimport { getPreparedPosts } from './api/utils';\nimport { PostsList } from './components/PostList/PostList';\n\nexport const App: FC = () => {\n  const [isLoading, setIsLoadind] = useState(false);\n  const [posts, setPosts] = useState<PostsInterface[]>([]);\n  const [query, setQuery] = useState('');\n\n  const handleLoadButton = async () => {\n    setIsLoadind(true);\n    const postsFromServer = await getPreparedPosts();\n\n    setPosts(postsFromServer);\n  };\n\n  const handleQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  /* const debounceHandleQuery = useCallback(debounce(handleQuery, 1000), []); */\n\n  const filterPostsByQuery = useMemo(() => posts.filter(\n    post => post.title.toLowerCase().includes(query)\n    || post.body.toLowerCase().includes(query),\n  ), [posts, query]);\n\n  return (\n    <>\n      <h1>Dynamic list of posts</h1>\n      {posts.length === 0\n        ? (\n          <button\n            type=\"button\"\n            disabled={isLoading}\n            className=\"button\"\n            onClick={handleLoadButton}\n          >\n            {isLoading ? (<>Loading...</>) : <>Load Todos</>}\n          </button>\n        )\n        : (\n          <>\n            <input\n              type=\"text\"\n              id=\"search-query\"\n              className=\"search_input\"\n              placeholder=\"Type search word\"\n              onChange={handleQuery}\n            />\n            <PostsList posts={filterPostsByQuery} />\n          </>\n        )}\n    </>\n  );\n};\n"],"sourceRoot":""}